{"version":3,"sources":["components/ChatBoxComponent.js","App.js","serviceWorker.js","index.js"],"names":["uName","Math","round","random","client","Client","brokerURL","connectHeaders","username","debug","str","console","log","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onDisconnect","f","logRawCommunication","ChatBoxComponent","props","today","Date","useState","getDate","getMonth","getFullYear","day","chatMsg","setChatMsg","type","sender","content","class","time","messages","setMessages","getMessages","useCallback","m","msgs","subscribe","a","Promise","resolve","activate","waiting","configure","onConnect","publish","destination","headers","body","JSON","stringify","msg","parsed","parse","handleSend","obj","payload","header","bottomRef","useRef","useEffect","length","current","scrollIntoView","behavior","Fragment","className","map","e","index","key","ref","onChange","target","value","maxLength","rows","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5814bf52.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { Client } from \"@stomp/stompjs\";\r\n\r\n\r\n\r\n// Generate anonymous username\r\nconst uName = (\"user\" + Math.round(Math.random() * 9999));\r\n\r\n// Stomp over Websocket Broker URL\r\nconst WS_URL = \"wss://thawing-retreat-89546.herokuapp.com/spring-ws\";\r\n\r\n// Create new Client instance once on page load\r\nconst client = new Client({\r\n  brokerURL: WS_URL,\r\n  connectHeaders: {username: uName},\r\n  debug: (str) => console.log(str),\r\n  reconnectDelay: 5000,\r\n  heartbeatIncoming: 4000,\r\n  heartbeatOutgoing: 4000,\r\n  onDisconnect: (f) => {\r\n    console.log(f);\r\n    console.log(\"On Disconnect\");\r\n  },\r\n  logRawCommunication: true\r\n});\r\n\r\n\r\n\r\nexport default function ChatBoxComponent(props) {\r\n  // Date generator DD-MM-YYYY\r\n  let today = new Date();\r\n  let [day] = useState(`${today.getDate() < 10 ? \"0\"+today.getDate() : today.getDate()}-${today.getMonth() < 10 ? \"0\"+today.getMonth() : today.getMonth()}-${today.getFullYear()}`);\r\n    \r\n\r\n  // Chat box change handler\r\n  let [chatMsg, setChatMsg] = useState(\"\");\r\n  function chatOnChange(e) {\r\n    setChatMsg(e.target.value);\r\n  }\r\n\r\n  // Array for storing received messages with an initial value set\r\n  let [messages, setMessages] = useState([\r\n    {\r\n      type: \"WELCOME\",\r\n      sender: \"system\",\r\n      content: `${uName} has entered the room.`,\r\n      class: \"none\",\r\n      time: day\r\n    }\r\n  ]);\r\n  // Method to get and process messages coming from the subscription\r\n  const getMessages = useCallback((m) => {\r\n    if (m.sender === uName) {\r\n      m.class = \"outgoing\"\r\n    } else m.class = \"incoming\";\r\n    setMessages(msgs => [...msgs, m])\r\n  }, [])\r\n\r\n\r\n  // Async callback to establish the subscription to the broker\r\n  const subscribe = useCallback(async () => {\r\n    let waiting = await new Promise((resolve) => {\r\n        client.activate();\r\n        resolve(true);\r\n    })\r\n    await new Promise((resolve) => {\r\n      client.configure({onConnect: (f) => {\r\n        client.publish({destination: \"/app/chat.newUser\", headers: {}, body: JSON.stringify({\r\n          sender: uName, type: \"CONNECT\"\r\n        })})\r\n      }})\r\n      resolve()\r\n    })\r\n    \r\n    if (waiting) {\r\n      client.configure({onConnect: () => {\r\n        console.log(\"On Connect\");\r\n        client.subscribe(\"/topic/public\", msg => {\r\n          if (msg) {\r\n            let parsed = JSON.parse(msg.body);\r\n            getMessages(parsed);\r\n          }\r\n        })\r\n      }})\r\n    } \r\n  }, [getMessages])\r\n\r\n  \r\n\r\n  \r\n  // Async function for sending a message to the server\r\n  const handleSend = async () => {\r\n    let obj = {\r\n      type: \"CHAT\",\r\n      sender: uName,\r\n      content: chatMsg,\r\n      time: day\r\n    }\r\n    let payload = JSON.stringify(obj);\r\n    await new Promise((resolve) => {\r\n      client.publish({destination: \"/app/chat.send\", header: {}, body: payload});\r\n      resolve()\r\n    })\r\n    setChatMsg(\"\");\r\n  }\r\n\r\n\r\n  // Ref for scrolling to bottom element in chat thread\r\n  let bottomRef = useRef(null);\r\n  \r\n  \r\n  // Method to render mapped messages from subscription\r\n  const renderMsgs = () => (messages.map((e, index) => (\r\n          <p key={index} className={e.class} >\r\n            <span>{e.sender === uName ? \"Myself\" : e.sender} </span>\r\n            {e.content}\r\n            <span><i> {e.time}</i></span>\r\n          </p>\r\n        )\r\n      )\r\n    )\r\n\r\n  \r\n    // keydownHandler\r\n    // const keydownHandler = useCallback((e) => {\r\n    //   let payload = JSON.stringify(obj);\r\n    //   if (e.key === \"Enter\") {\r\n    //     client.publish({destination: \"/app/chat.send\", header: {}, body: payload});\r\n    //   }\r\n      \r\n    // }, [obj]) \r\n\r\n  // Call the async callback for subscribing on page load\r\n  useEffect(() => {\r\n    subscribe();\r\n    if (messages.length > 3) {\r\n      bottomRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n\r\n    \r\n\r\n    // Send function for handling keydown=enter\r\n    // window.addEventListener(\"keydown\", keydownHandler)\r\n    \r\n\r\n    // Cleanup\r\n    // return () => (\r\n    //   window.removeEventListener(\"keydown\", keydownHandler)\r\n    // )\r\n  }, [subscribe, messages])\r\n  \r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"chat-box\">\r\n        <header>\r\n          <h1>\r\n            Simple Chat App\r\n          </h1>\r\n        </header>\r\n        <div className=\"chat-body\">\r\n          <div className=\"chat-thread\">\r\n              {renderMsgs()}\r\n              <div ref={bottomRef} />\r\n          </div>\r\n          <div className=\"chat-message\">\r\n            <textarea \r\n              type=\"text\"\r\n              onChange={chatOnChange} \r\n              maxLength={100}\r\n              rows={3}\r\n              value={chatMsg}\r\n              >\r\n              \r\n            </textarea>\r\n            <div className=\"chat-button\">\r\n              <button onClick={handleSend}>\r\n                Send\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\nimport ChatBox from \"./components/ChatBoxComponent\";\n\nfunction App() {\n  return (\n\t\t<div className=\"App\">\n\t\t\t<ChatBox/>\n\t\t</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}